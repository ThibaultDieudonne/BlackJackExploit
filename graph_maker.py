import pickle
import inspect
filepath = os.path.realpath(
            os.path.abspath(
                os.path.split(
                    inspect.getfile(
                        inspect.currentframe()))[0]))
                        
class Graph():
    def __init__(self, card):
        self.hands = [[]for _ in range(6)]
        self.ans = [[]for _ in range(6)]
        self.dcard = [card]
        
    def construct(self):
        self.construct_rec(self.dcard)
        return self.ans
        
    def construct_rec(self, dhand):
        dhand = sorted(dhand)
        shand = [_ for _ in dhand]
        shand.remove(self.dcard[0])
        sco = score(dhand)
        if sco > 16 or not sco:
            lhand = len(shand) - 1
            if sco == 0:
                pindex = 5
            elif sco < 22:
                pindex = sco - 17
            else:
                return None
            self.addempty(pindex, lhand)
            try:
                index = self.hands[pindex][lhand].index(shand)
                self.ans[pindex][lhand][index][-1] += 1
            except:
                self.hands[pindex][lhand].append(shand)
                self.ans[pindex][lhand].append(shand + [1])
        else:
            for value in range(10):
                nhand = dhand + [value]
                self.construct_rec(nhand)
        return None
        
    def addempty(self, index, lhand):
        while len(self.hands[index]) < lhand + 2:
            self.hands[index].append([])
            self.ans[index].append([])
                
def score(cards):
    nbAces = cards.count(0)
    toreturn = sum(cards) + len(cards)
    if cards == [0, 9] or cards == [9, 0]:
        return 0
    return toreturn + 10 if (nbAces and toreturn < 12) else toreturn

Graphs = [Graph(i)for i in range(10)]
GRAPHS = [g.construct() for g in Graphs]
with open(os.path.join(filepath, 'GRAPHS'), 'wb') as fp:
    pickle.dump(GRAPHS, fp)