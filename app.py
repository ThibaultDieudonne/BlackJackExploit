import os
from random import choices
import time
from threading import Thread
from functools import partial
import inspect

from tkinter import Tk, Frame, Button, Entry, Label
from PIL import ImageTk

from blackjack import score
import playsingle
import runwild

'''GUI'''

class Application():

    '''Single display class'''
    # setting constants
    FILEPATH = os.path.realpath(
        os.path.abspath(
            os.path.split(
                inspect.getfile(
                    inspect.currentframe()))[0]))
    X = 500
    Y = 470
    X2 = 825
    Y2 = 250
    CARDSNAMES = [
        'ace',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        'ten',
        'jack',
        'queen',
        'king']
    DECK = [4, 4, 4, 4, 4, 4, 4, 4, 4, 16]
    SUITS = ['hearts', 'diamonds', 'clubs', 'spades']
    BGCOl = "#458b00"

    def __init__(self):
        '''class inits'''
        # few inits
        self.deck = [_ for _ in self.DECK]
        self.calculator = Simulation(self.deck, 0)
        self.money = 1000
        self.ibet = 5

    def display_menu(self):
        '''menu display function'''
        # menu UI
        self.window = Tk()
        self.window.resizable(False, False)
        self.window.title("BJ")
        self.window.geometry('340x270')
        self.window.iconbitmap(os.path.join(
            self.FILEPATH, "cards", "icon.ico"))
        lbl = Label(
            self.window,
            text='\n'.join([
                'BlackJack is gambling !',
                'In the long run you are always destined to be broke.',
                'Only allocate money you can afford to lose.',
                'This software will never prevent you from losing money.',
                'Choose a table allowing 3% of your bankroll as maximum bet.']))
        lbl.grid(column=0, row=0, pady=5, padx=5, columnspan=30)
        btn_play = Button(self.window, text="Play Game", command=self.playmode)
        btn_play.grid(column=8, row=1, pady=5, padx=5)
        btn_track = Button(self.window, text="Track Game", command=self.tracker)
        btn_track.grid(column=8, row=2, pady=5, padx=5)
        lbl2 = Label(
            self.window,
            text='\n'.join([
                'This is a free open-source software.',
                'Sources can be found at:',
                'https://github.com/ThibaultDieudonne/BlackJackExploit']))
        lbl2.grid(column=0, row=3, pady=5, padx=5, columnspan=30)
        lbld = Label(self.window, text="Decks:")
        lbld.grid(column=0, row=4, pady=5, padx=5, sticky='e')
        self.deckbox = Entry(self.window, width=2)
        self.deckbox.insert(0, '8')
        self.deckbox.grid(column=1, row=4, pady=5, padx=5, sticky='w')
        
        self.window.mainloop()

    def playmode(self):
        '''play mode display function'''
        # set deck
        try:
            self.decksize = int(self.deckbox.get()) % 9
            if not self.decksize:
                self.decksize = 8
        except:
            self.decksize = 8
        self.deck = [i * self.decksize for i in self.DECK]
        # label reference memory
        self.plabels = []
        self.dlabels = []
        # playmode UI
        self.window.destroy()
        self.window = Tk()
        self.window.resizable(False, False)
        self.window.title("Black Jack - Play Mode")
        self.window.geometry('{}x{}'.format(self.X, self.Y))
        self.window.configure(bg="green")
        self.window.iconbitmap(os.path.join(
            self.FILEPATH, "cards", "icon.ico"))
        btn_menu = Button(
            self.window,
            text="Return to Menu",
            command=self.return_to_menu, background=self.BGCOl)
        btn_menu.pack()
        btn_menu.place(x=self.X-97, y=self.Y-30)
        btn_deck = Button(
            self.window,
            text="Reset Deck",
            command=self.reset_deck,
            background=self.BGCOl)
        btn_deck.pack()
        btn_deck.place(x=self.X-170, y=self.Y-30)
        self.btn_run = Button(
            self.window,
            text="Run simulation",
            command=lambda: self.run_wild(0),
            background=self.BGCOl)
        self.btn_run.pack()
        self.btn_run.place(x=self.X-265, y=self.Y-30)
        # dealer cards frame
        self.dframe = Frame(self.window, background="green")
        self.dframe.grid(row=0, columnspan=1000, sticky='w')
        # middle info labels frame
        self.iframe = Frame(self.window, height=80, background="green")
        self.iframe.grid(row=1, sticky='w', columnspan=1000)
        self.iframe.rowconfigure(0, minsize=50)
        self.lblg = Label(self.iframe, text="Bet:", background="green")
        self.lblg.grid(column=0, row=0, pady=5, padx=15)
        self.txtbox = Entry(self.iframe, width=7, background=self.BGCOl)
        self.txtbox.insert(0, str(self.ibet))
        self.txtbox.grid(column=1, row=0, pady=5, padx=5)
        self.btn_play = Button(
            self.iframe,
            text="Deal",
            command=self.deal,
            background=self.BGCOl)
        self.btn_play.grid(column=2, row=0, pady=5, padx=5)
        # player cards frame
        self.pframe = Frame(self.window, background="green")
        self.pframe.grid(row=2, columnspan=1000, sticky='w')
        # bottom info labels frame
        self.bframe = Frame(self.window, background="green")
        self.bframe.grid(row=3, sticky='w', columnspan=1000)
        self.lbli = Label(self.bframe,
                          text="${}".format(self.money),
                          background="green")
        self.lbli.grid(column=0, row=0, pady=5, padx=5)
        self.lbli2 = Label(self.bframe, text="Bet: $0", background="green")
        self.lbli2.grid(column=1, row=0, pady=5, padx=5)
        self.lbli3 = Label(
            self.bframe,
            text="Deck composition:",
            background="green")
        self.lbli3.grid(column=0, row=1, pady=5, padx=5, columnspan=6)
        self.lbli4 = Label(
            self.bframe,
            text='    '.join(['{}: {}'.format(
                ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'][i],
                self.deck[i]) for i in range(10)]),
            background="green")
        self.lbli4.grid(column=0, row=2, pady=5, padx=5, columnspan=1000)
        self.lbli5 = Label(self.bframe, text="", background="green")
        self.lbli5.grid(column=0, row=3, pady=5, padx=5, columnspan=6)
        self.lbli6 = Label(self.bframe, text='', background="green")
        self.lbli6.grid(column=0, row=4, pady=5, padx=5, columnspan=1000)
        # loading static
        self.imgs = {}
        for name in self.CARDSNAMES:
            for suit in self.SUITS:
                file_name = '{}_of_{}'.format(name, suit)
                self.imgs[file_name] = ImageTk.PhotoImage(file=os.path.join(
                    self.FILEPATH,
                    "cards",
                    "{}.jpg".format(file_name)))
        self.card_back = ImageTk.PhotoImage(file=os.path.join(
            self.FILEPATH,
            "cards",
            "card_back.jpg"))

        self.window.mainloop()

    def tracker(self):
        '''tracker mode display function'''
        # set deck
        try:
            self.decksize = int(self.deckbox.get()) % 9
            if not self.decksize:
                self.decksize = 8
        except:
            self.decksize = 8
        self.deck = [i * self.decksize for i in self.DECK]
        # tracker UI
        self.window.destroy()
        self.window = Tk()
        self.window.resizable(False, False)
        self.window.title("Black Jack - Tracker")
        self.window.geometry('{}x{}'.format(self.X2, self.Y2))
        self.window.configure(bg="green")
        self.window.iconbitmap(os.path.join(
            self.FILEPATH, "cards", "icon.ico"))
        btn_menu = Button(
            self.window,
            text="Return to Menu",
            command=self.return_to_menu,
            background=self.BGCOl)
        btn_menu.pack()
        btn_menu.place(x=self.X2-97, y=self.Y2-30)
        btn_deck = Button(
            self.window,
            text="Reset Deck",
            command=self.reset_tracker,
            background=self.BGCOl)
        btn_deck.pack()
        btn_deck.place(x=self.X2-170, y=self.Y2-30)
        self.btn_run = Button(
            self.window,
            text="Run simulation",
            command=lambda: self.run_wild(1),
            background=self.BGCOl)
        self.btn_run.pack()
        self.btn_run.place(x=self.X2-265, y=self.Y2-30)
        self.resultlbl = Label(
            self.window,
            text='',
            background="green",
            font=("Courier", 11))
        self.resultlbl.grid(
            column=0,
            row=4,
            pady=5,
            padx=5,
            columnspan=20,
            rowspan=2,
            sticky='w')
        # filling cards frame
        self.imgs = []
        self.img_lbls = []
        for i, name in enumerate(self.CARDSNAMES):
            self.imgs.append(ImageTk.PhotoImage(file=os.path.join(
                self.FILEPATH,
                "cards",
                "{}_of_spades.jpg".format(name))))
            self.img_lbls.append(Label(
                self.window,
                image=self.imgs[-1],
                anchor="w",
                background="green"))
            self.img_lbls[-1].grid(column=i, row=0, pady=5, padx=5)
        # counters frame
        self.labels = []
        for i in range(10):
            self.labels.append(Label(
                self.window,
                text=str(self.deck[i]),
                background="green"))
            self.labels[-1].grid(column=i, row=1, pady=5, padx=5)
        # - buttons frame
        self.btns = []
        for i in range(10):
            self.btns.append(Button(
                self.window,
                text="  -  ",
                command=partial(self.decrease, i),
                background=self.BGCOl))
            self.btns[-1].grid(column=i, row=2, pady=5, padx=5)
        # + buttons frame
        self.btns2 = []
        for i in range(10):
            self.btns2.append(Button(
                self.window,
                text=" + ",
                command=partial(self.increase, i),
                background=self.BGCOl))
            self.btns2[-1].grid(column=i, row=3, pady=5, padx=5)

        self.window.mainloop()

    def decrease(self, id_):
        '''tracker mode - button function'''
        if self.deck[id_] > 0:
            self.deck[id_] -= 1
            self.labels[id_].config(text=str(self.deck[id_]))
            self.window.update()

    def increase(self, id_):
        '''tracker mode + button function'''
        if id_ != 9:
            if self.deck[id_] == 32:
                return None
        else:
            if self.deck[id_] == 128:
                return None
        self.deck[id_] += 1
        self.labels[id_].config(text=str(self.deck[id_]))
        self.window.update()
        return None

    def deal(self):
        '''new hand function'''
        # managing money
        if self.money < 5:
            self.money = 1000
        # managing bet input
        try:
            self.bet = int(self.txtbox.get()) % (self.money + 1)
            if not self.bet:
                self.bet = 5
        except:
            self.bet = 5
        self.ibet = self.bet
        self.money -= self.bet
        # updating UI
        self.refresh_infos()
        self.window.update()
        self.btn_play.destroy()
        self.window.update()
        self.lblg.config(text='')
        self.txtbox.destroy()
        # drawing cards
        self.pcards = []
        self.dcards = []
        self.pcards.append(self.draw(0))
        self.dcards.append(self.draw(1))
        self.pcards.append(self.draw(0))
        # displaying face down card
        time.sleep(.8)
        self.dlabels.append(Label(
            self.dframe,
            image=self.card_back,
            background="green"))
        self.dlabels[-1].grid(column=1, row=0, pady=5, padx=5)
        self.window.update()
        # resetting split hand score
        self.split_score = -1
        self.is_split = False
        if score(self.pcards):
            self.play()
        else:
            self.results()

    def play(self):
        '''new player action function'''
        # finding available self.actions
        self.actions = 0
        if len(self.pcards) == 2 and not self.is_split:
            if self.pcards[0] == self.pcards[1]:
                self.actions = 2
            else:
                self.actions = 1
        # finding strategies
        self.lbli5.config(text='Strategies:')
        result = playsingle.run(self.pcards + self.dcards, self.deck)
        self.lbli6.config(text='    '.join(['{}: {}'.format(
            action,
            round(value * self.bet, 2)) for action, value in result.items()]))
        # updating UI
        self.btn_stand = Button(
            self.iframe,
            text="Stand",
            command=self.results,
            background=self.BGCOl)
        self.btn_stand.grid(column=1, row=0, pady=5, padx=5)
        self.btn_hit = Button(
            self.iframe,
            text="Hit",
            command=self.hit,
            background=self.BGCOl)
        self.btn_hit.grid(column=2, row=0, pady=5, padx=5)
        if self.actions:
            self.btn_double = Button(
                self.iframe,
                text="Double",
                command=self.double,
                background=self.BGCOl)
            self.btn_double.grid(column=3, row=0, pady=5, padx=5)
        if self.actions == 2:
            self.btn_split = Button(
                self.iframe,
                text="Split",
                command=self.split,
                background=self.BGCOl)
            self.btn_split.grid(column=4, row=0, pady=5, padx=5)

    def hit(self):
        '''Hit button function'''
        self.kill_action_buttons()
        self.pcards.append(self.draw(0))
        self.eval_hand()

    def double(self):
        '''Double button function'''
        self.kill_action_buttons()
        self.money -= self.bet
        self.bet *= 2
        self.refresh_infos()
        self.pcards.append(self.draw(0))
        self.results()

    def split(self):
        '''Split button function'''
        self.money -= self.bet
        self.is_split = True
        self.kill_action_buttons()
        self.plabels[1].destroy()
        del self.pcards[1]
        self.pcards.append(self.draw(0))
        self.eval_hand()

    def eval_hand(self):
        '''function dertermining if player can still act'''
        sco = score(self.pcards)
        if (sco > 20 or not sco) or (self.is_split and not self.pcards[0]):
            self.results()
        else:
            self.play()

    def results(self):
        '''end of hand function'''
        pscore = score(self.pcards)
        # managing case where player is splitting
        if self.is_split and self.split_score == -1:
            if len(self.pcards) > 2:
                time.sleep(.8)
            self.split_score = pscore
            for label in self.plabels[1:]:
                label.destroy()
            while len(self.pcards) != 1:
                del self.pcards[1]
            self.kill_action_buttons()
            self.pcards.append(self.draw(0))
            self.eval_hand()
        else:
            if pscore:
                self.kill_action_buttons()
            # removing face down card
            self.dlabels[1].destroy()
            # playing the dealer
            dscore = score(self.dcards)
            while dscore < 17 and dscore:
                self.dcards.append(self.draw(1))
                dscore = score(self.dcards)
            # finding outcome
            if self.is_split:
                res_txt = 'Split outcome: $'
                outcome = 0
                for sco in [self.split_score, pscore]:
                    if sco == 0:
                        if dscore == 0:
                            outcome += self.bet
                        else:
                            outcome += 2 * self.bet
                    elif sco == dscore and sco < 22:
                        outcome += self.bet
                    elif ((sco > dscore and dscore) or dscore > 21) and sco < 22:
                        outcome += 2 * self.bet
                res_txt += str(outcome)
                self.money += outcome
            else:
                txt_pscore = pscore if pscore else 21
                txt_dscore = dscore if dscore else 21
                res_txt = '{} - {}    '.format(txt_pscore, txt_dscore)
                if pscore == 0:
                    if dscore == 0:
                        res_txt += 'Two Blackjacks ! (+{})'.format(self.bet)
                        self.money += self.bet
                    else:
                        res_txt += 'Blackjack ! (+{})'.format(2.5 * self.bet)
                        self.money += 2.5 * self.bet
                elif pscore > 21:
                    res_txt += 'Too many ...'
                elif pscore == dscore:
                    res_txt += "It's a push (+{})".format(self.bet)
                    self.money += self.bet
                elif (pscore > dscore and dscore) or dscore > 21:
                    res_txt += "You win ! (+{})".format(2 * self.bet)
                    self.money += 2 * self.bet
                else:
                    res_txt += "Dealer wins"
            # updating UI
            self.refresh_infos()
            self.lblr = Label(self.window, text=res_txt, background="green")
            self.lblr.grid(column=0, row=1, pady=5, padx=5, columnspan=3)
            self.btn_new = Button(
                self.window,
                text="Next Hand",
                command=self.reset,
                background=self.BGCOl)
            self.btn_new.grid(column=4, row=1, pady=5, padx=5)

    def return_to_menu(self):
        '''functions that destroys current windows and brings back menu'''
        self.window.destroy()
        self.display_menu()

    def draw(self, id_):
        '''functions that proceed deck draw and displays in play mode'''
        self.window.update()
        time.sleep(.8)
        if not sum(self.deck):
            self.reset_deck()
        card = choices(
            population=[i for i in range(10)],
            weights=self.deck,
            k=1)[0]
        self.deck[card] -= 1
        suit = choices(population=self.SUITS, k=1)[0]
        card_name = self.CARDSNAMES[card]
        if card_name == 'ten':
            card_name = choices(population=self.CARDSNAMES[9:], k=1)[0]
        if id_:
            self.dlabels.append(Label(
                self.dframe,
                image=self.imgs['{}_of_{}'.format(card_name, suit)],
                anchor="w",
                background="green"))
            self.dlabels[-1].grid(
                column=len(self.dlabels)-1,
                row=0,
                pady=5,
                padx=5)
        else:
            self.plabels.append(Label(
                self.pframe,
                image=self.imgs['{}_of_{}'.format(card_name, suit)],
                anchor="w",
                background="green"))
            self.plabels[-1].grid(
                column=len(self.plabels)-1,
                row=0,
                pady=5,
                padx=5)
        self.refresh_infos()
        self.window.update()
        return card

    def refresh_infos(self):
        '''updating usual infos to the player'''
        self.lbli.config(text='${}'.format(self.money))
        self.lbli2.config(text="Bet: ${}".format(self.bet))
        self.lbli4.config(text='    '.join(['{}: {}'.format(
            self.CARDSNAMES[i],
            self.deck[i]) for i in range(10)]))
        self.window.update()

    def kill_action_buttons(self):
        '''protecting buttons access while displaying'''
        self.btn_stand.destroy()
        self.btn_hit.destroy()
        if self.actions:
            self.btn_double.destroy()
        if self.actions == 2:
            self.btn_split.destroy()
        self.lblg.config(text='')
        self.window.update()
        return None

    def reset(self):
        '''new hands resets for play mode'''
        for lab in self.plabels:
            lab.destroy()
        for lab in self.dlabels:
            lab.destroy()
        self.plabels = []
        self.dlabels = []
        try:
            self.lblr.destroy()
            self.btn_new.destroy()
        except:
            pass
        self.lbli5.config(text='')
        self.lbli6.config(text='')
        self.lblg = Label(self.iframe, text="Bet:", background="green")
        self.lblg.grid(column=0, row=0, pady=5, padx=5)
        self.txtbox = Entry(self.iframe, width=7, background=self.BGCOl)
        self.txtbox.insert(0, str(self.ibet))
        self.txtbox.grid(column=1, row=0, pady=5, padx=5)
        self.btn_play = Button(
            self.iframe,
            text="Deal",
            command=self.deal,
            background=self.BGCOl)
        self.btn_play.grid(column=2, row=0, pady=5, padx=5)

    def reset_deck(self):
        '''reset deck in play mode'''
        self.deck = [i * self.decksize for i in self.DECK]
        self.refresh_infos()

    def reset_tracker(self):
        '''reset deck in tracker'''
        self.deck = [i * self.decksize for i in self.DECK]
        for i in range(10):
            self.labels[i].config(text=str(self.deck[i]))
        self.window.update()

    def run_wild(self, id_):
        '''instanciate calculator'''
        if not self.calculator.working and sum(self.deck) > 13:
            self.calculator = Simulation(self.deck, id_)
            self.calculator.start()


class Simulation(Thread):

    '''Threaded class for full simulation runs'''

    def __init__(self, deck, id_):
        Thread.__init__(self)
        self.working = False
        self.deck = deck
        self.id_ = id_

    def run(self):
        MYAPP.btn_run.config(text='Calculating .....')
        self.working = True
        self.expval = runwild.run(self.deck)
        self.working = False
        if self.id_:
            if self.expval < 0:
                recommand = "You should try to bet as small as possible"
            elif self.expval < 1:
                recommand = "You shouldn't bet more than 1% of your money"
            elif self.expval < 3:
                recommand = "You shouldn't bet more than 2% of your money"
            else:
                recommand = "You can bet up to 3% of your money"
            MYAPP.resultlbl.config(
                text='EV = {}%  '.format(round(self.expval, 4)) + recommand)
        else:
            MYAPP.lbli3.config(
                text='Deck composition (EV = {}%):'.format(
                    round(self.expval, 4)))
        MYAPP.window.update()
        MYAPP.btn_run.config(text='Run simulation')


if __name__ == '__main__':
    MYAPP = Application()
    MYAPP.display_menu()
    