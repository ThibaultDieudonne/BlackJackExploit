from tkinter import *
from PIL import ImageTk
import os
from random import choices
import time
from blackjack import *

class Application():
    
    def __init__(self):
        self.x = 400
        self.y = 400
        self.money = 1000
        self.deck = [32, 32, 32, 32, 32, 32, 32, 32, 32, 128]
    
    def display_menu(self):
        
        self.window = Tk()       
        self.window.resizable(False, False)
        self.window.title("BJ")
        self.window.geometry('325x145')
        lbl = Label(self.window, text="This is a free open-source software.\nSources can be found at:\n https://github.com/ThibaultDieudonne/BlackJackExploit")
        lbl.grid(column=0, row=0, pady = 5, padx = 5)
        btnPlay = Button(self.window, text="Play Game", command=self.btn_playMode)
        btnPlay.grid(column=0, row=1, pady = 5, padx = 5)
        btnTrack = Button(self.window, text="Track Game", command=self.btn_trackerMode)
        btnTrack.grid(column=0, row=2, pady = 5, padx = 5)
        self.window.mainloop()
        
    def btn_playMode(self):
        # label reference memory
        self.plabels = []
        self.dlabels = []
        
        # UI inits
        self.window.destroy()
        self.window = Tk()
        self.window.resizable(False, False)
        self.window.title("Black Jack - Play Mode")
        self.window.geometry('{}x{}'.format(self.x, self.y))
        btnMenu = Button(self.window, text="Return to Menu", command=self.return_to_menu)
        btnMenu.pack()
        btnMenu.place(x=self.x-97, y=self.y-30)
        self.dframe = Frame(self.window)
        self.dframe.grid(row=0, columnspan=1000, sticky = 'w')
        self.iframe = Frame(self.window, height = 80)
        self.iframe.grid(row=1, columnspan=1000, sticky = 'w')
        self.iframe.rowconfigure(0, minsize = 50)
        self.lblg = Label(self.iframe, text="Bet:")
        self.lblg.grid(column=0, row=0, pady = 5, padx = 5)
        self.txtbox = Entry(self.iframe, width=7)
        self.txtbox.insert(0, '20')
        self.txtbox.grid(column=1, row=0, pady = 5, padx = 5)
        self.btnPlay = Button(self.iframe, text="Deal", command=self.deal)
        self.btnPlay.grid(column=2, row=0, pady = 5, padx = 5)
        self.pframe = Frame(self.window)
        self.pframe.grid(row=2, columnspan=1000, sticky = 'w')
        self.lbli = Label(self.window, text="${}".format(self.money))
        self.lbli.grid(column=0, row=3, pady = 5, padx = 5)
        # loading static
        self.imgs = [ImageTk.PhotoImage(file=os.path.join(os.path.dirname(os.path.realpath(__file__)), "cards", "{}.jpg".format(i)))for i in range(13)]
        self.imgs.append(ImageTk.PhotoImage(file=os.path.join(os.path.dirname(os.path.realpath(__file__)), "cards", "card_back.jpg")))
        
        self.window.mainloop()
        
    def btn_trackerMode(self):
        
        self.window.destroy()
        self.window = Tk()
        self.window.resizable(False, False)
        self.window.title("Black Jack - Tracker")
        self.window.geometry('{}x{}'.format(self.x, self.y))
        btnMenu = Button(self.window, text="Return to Menu", command=self.return_to_menu)
        btnMenu.pack()
        btnMenu.place(x=self.x-97, y=self.y-30)
        self.window.mainloop()
    
    def deal(self):
        # managing bet input
        self.bet = self.txtbox.get()
        try:
            self.bet = int(self.bet)
            if self.bet < 0 or self.bet > self.money:
                self.bet = 20
        except TypeError:
            self.bet = 20
        self.money -= self.bet
        # updating UI
        self.lbli.config(text='${}'.format(self.money))
        self.lbli2 = Label(self.window, text="Bet: ${}".format(self.bet))
        self.lbli2.grid(column=1, row=3, pady = 5, padx = 5)
        self.window.update()
        self.btnPlay.destroy()
        self.window.update()
        self.lblg.config(text = '')
        self.txtbox.destroy()
        # drawing cards
        self.pcards = []
        self.dcards = []
        self.pcards.append(self.draw(0))
        self.dcards.append(self.draw(1))
        self.pcards.append(self.draw(0))
        # displaying face down card
        time.sleep(.8)
        self.dlabels.append(Label(self.dframe, image=self.imgs[13]))
        self.dlabels[-1].grid(column=1, row=0, pady = 5, padx = 5)
        self.window.update()
    
        if score(self.pcards):
            self.play()
        else:
            self.results()
        
    def play(self):    
        # determining available self.actions
        self.actions = 0
        if len(self.pcards) == 2:
            if self.pcards[0] == self.pcards[1]:
                self.actions = 2
            else:
                self.actions = 1
        # updating UI
        self.lblg.config(text='Action:')
        self.btnStand = Button(self.window, text="Stand", command=self.results, height = 1)
        self.btnStand.grid(column=1, row=1, pady = 5, padx = 5)
        self.btnHit = Button(self.window, text="Hit", command=self.hit, height = 1)
        self.btnHit.grid(column=2, row=1, pady = 5, padx = 5)
        if self.actions:
            self.btnDouble = Button(self.window, text="Double", command=self.double, height = 1)
            self.btnDouble.grid(column=3, row=1, pady = 5, padx = 5)
        if self.actions == 2:
            self.btnSplit = Button(self.window, text="Split", command=self.double, height = 1)
            self.btnSplit.grid(column=4, row=1, pady = 5, padx = 5)
    
    def hit(self):
        self.kill_action_buttons()
        self.pcards.append(self.draw(0))
        self.eval_hand()
        
    def double(self):
        self.kill_action_buttons()
        self.money -= self.bet
        self.bet *= 2
        self.lbli.config(text='${}'.format(self.money))
        self.lbli2.config(text="Bet: ${}".format(self.bet))
        self.pcards.append(self.draw(0))
        self.results()
    
    def split(self):
        self.kill_action_buttons()
        
    def eval_hand(self):
        s = score(self.pcards)
        if s > 20 or not s:
            self.results()
        else:
            self.play()
            
    def results(self):
        self.kill_action_buttons()
        # removing face down card
        self.dlabels[1].destroy()
        # playing the dealer
        dscore = score(self.dcards)
        while dscore < 17 and dscore:
            self.dcards.append(self.draw(1))
            dscore = score(self.dcards)
        # determining outcome
        pscore = score(self.pcards)
        txt_pscore = pscore if pscore else 21
        txt_dscore = dscore if dscore else 21
        res_txt = '{} - {}    '.format(txt_pscore, txt_dscore)
        if pscore == 0:
            if dscore == 0:
                res_txt += 'Blackjack against Blackjack (+{})'.format(self.bet)
                self.money += self.bet
            else:
                res_txt += 'Blackjack ! (+{})'.format(2.5 * self.bet)
                self.money += 2.5 * self.bet
        elif pscore > 21:
            res_txt += 'Too many ...'
        elif pscore == dscore:
            res_txt += "It's a push (+{})".format(self.bet)
            self.money += self.bet
        elif (pscore > dscore and dscore) or dscore > 21:
            res_txt += "You win ! (+{})".format(2 * self.bet)
            self.money += 2* self.bet
        else:
            res_txt += "Dealer wins"
        # updating UI
        self.lblr = Label(self.window, text=res_txt)
        self.lblr.grid(column=0, row=1, pady = 5, padx = 5, columnspan = 3)
        self.lblg.config(text = '')
        self.btnNew = Button(self.window, text="Next Hand", command=self.reset)
        self.btnNew.grid(column=4, row=1, pady = 5, padx = 5)
        
    def return_to_menu(self):
        
        self.window.destroy()
        self.display_menu()
        
    def draw(self, id):
        self.window.update()
        time.sleep(.8)
        card = choices(population=[i for i in range(10)], weights=self.deck, k=1)[0]
        self.deck[card] -= 1
        if id:
            self.dlabels.append(Label(self.dframe, image=self.imgs[card], anchor="w"))
            self.dlabels[-1].grid(column=len(self.dlabels)-1, row=0, pady = 5, padx = 5)
        else:
            self.plabels.append(Label(self.pframe, image=self.imgs[card], anchor="w"))
            self.plabels[-1].grid(column=len(self.plabels)-1, row=0, pady = 5, padx = 5)
        self.window.update()
        return card
    
    def kill_action_buttons(self):
        self.btnStand.destroy()
        self.btnHit.destroy()
        if self.actions:
            self.btnDouble.destroy()
        if self.actions == 2:
            self.btnSplit.destroy()
        self.window.update()
        return None
    
    def reset(self):
        for l in self.plabels:
            l.destroy()
        for l in self.dlabels:
            l.destroy()
        self.plabels = []
        self.dlabels = []
        self.lblr.destroy()
        self.btnNew.destroy()
        self.lbli.config(text='${}'.format(self.money))
        self.lblg = Label(self.iframe, text="Bet:")
        self.lblg.grid(column=0, row=0, pady = 5, padx = 5)
        self.txtbox = Entry(self.iframe, width=7)
        self.txtbox.insert(0, '20')
        self.txtbox.grid(column=1, row=0, pady = 5, padx = 5)
        self.btnPlay = Button(self.iframe, text="Deal", command=self.deal)
        self.btnPlay.grid(column=2, row=0, pady = 5, padx = 5)
        
if __name__ == '__main__':
    myapp = Application()
    myapp.display_menu()
