from blackjack import *

def run_playsingle(cards, deck, after_dealt = True):
    '''run specific hand simulation. Hand format: [player_card1, ..., dealer_card]'''
    _deck = deck
    calc = FastEval(cards, _deck, after_dealt, 20, True, len(cards))
    ev = calc.ev(calc.cards, calc.deck, evd(score(calc.cards), calc.ddib, 0))
    return ev

if __name__ == '__main__':  
    evs = []
    deck = [29, 32, 32, 32, 32, 32, 32, 32, 32, 128]
    for i in range(9):
        d = [_ for _ in deck]
        d[i] -= 1
        evs.append(run_playsingle([0, i, 0], d, True)['Stand'])
    evs.append(0.691747572815534) # AT vs A with Blackjack paying 1 to 1
    print('AX vs A Stand Evs')
    print(evs)
    print('\nWeighted Ev, doubled because of split:')
    print(2 * sum(evs[i] * (deck[i]) for i in range(10))/sum(deck))
    print("\nCalculator's AA vs A split ev:")
    print(run_playsingle([0, 0, 0], deck, True)['Split'])
    
    # # with blackjack paying 1 to 1 (wizard_split = -0.535262, 71% rel_err)
    # deck = [29, 32, 32, 32, 32, 32, 32, 32, 32, 128]
    # result = 0
    # for card, count in enumerate(deck):
    #     ndeck = [_ for _ in deck]
    #     ndeck[card] -= 1
    #     for card2, count2 in enumerate(ndeck):
    #         nndeck = [_ for _ in ndeck]
    #         nndeck[card2] -= 1
    #         result += run_playsingle([0, card, 0], nndeck, True)['Stand'] * count * count2
    #         result += run_playsingle([0, card2, 0], nndeck, True)['Stand'] * count * count2
    # s = sum(deck)
    # result /= s * (s - 1)
    # print(result)
    
    # print(run_playsingle([0, 9, 0], [29, 32, 32, 32, 32, 32, 32, 32, 32, 127], True)['Stand'])