# from blackjack import *
# 
# def run_playsingle(cards, deck, after_dealt = True):
#     '''run specific hand simulation. Hand format: [player_card1, ..., dealer_card]'''
#     _deck = deck
#     calc = FastEval(cards, _deck, after_dealt, 20, True, len(cards))
#     ev = calc.ev(calc.cards, calc.deck, evd(score(calc.cards), calc.ddib, 0))
#     return ev

if __name__ == '__main__':
    
    # weighted average of Ax vs A hands with blackjack apying 1 to 1
    # evs = []
    # deck = [29, 32, 32, 32, 32, 32, 32, 32, 32, 128]
    # for i in range(9):
    #     d = [_ for _ in deck]
    #     d[i] -= 1
    #     evs.append(run_playsingle([0, i, 0], d, True)['Stand'])
    # evs.append(0.691747572815534) # AT vs A with Blackjack paying 1 to 1
    # print('AX vs A Stand Evs')
    # print(evs)
    # print('\nWeighted Ev, doubled because of split:')
    # print(2 * sum(evs[i] * (deck[i]) for i in range(10))/sum(deck))
    # print("\nCalculator's AA vs A split ev:")
    # print(run_playsingle([0, 0, 0], deck, True)['Split'])
    
    # perfect split aces calculator
    # blackjack must pay 1 to 1 (wizard_split = -0.535262, 71% rel_err)
    # deck = [29, 32, 32, 32, 32, 32, 32, 32, 32, 128]
    # result = 0
    # for card, count in enumerate(deck):
    #     ndeck = [_ for _ in deck]
    #     ndeck[card] -= 1
    #     for card2, count2 in enumerate(ndeck):
    #         nndeck = [_ for _ in ndeck]
    #         nndeck[card2] -= 1
    #         result += run_playsingle([0, card, 0], nndeck, True)['Stand'] * count * count2
    #         result += run_playsingle([0, card2, 0], nndeck, True)['Stand'] * count * count2
    # s = sum(deck)
    # result /= s * (s - 1)
    # print(result)
    
    # print(run_playsingle([0, 9, 0], [29, 32, 32, 32, 32, 32, 32, 32, 32, 127], True)['Stand'])
    
    
    # risk calculator on fixed portion of stack betsize
    from random import random
    from math import ceil
    for ev in [-1, -2, -3]:
        for bcr in range(1, 6):
            playerev = ev / 100.
            betcreditratio = bcr / 100.
            rndparser = (playerev + 1) / 2.
            pop = 10000
            
            count = 0.
            
            for i in range(pop):
                credit = 1000
                # if not i % 200:
                #     print('Done: {}/{}'.format(i, pop))
                for g in range(5000):
                    bet = ceil(betcreditratio * credit)
                    result = random()
                    if result < rndparser:
                        credit += bet
                    else:
                        credit -= bet
                    if credit < 500:
                        break
                if credit > 1000:
                    count += 1
                
            print('ev = {}%, bet = {}% ===> {}% winners'.format(ev, bcr, 100 * count / pop))
        print('\n')