# test double up, test split (cas aces)
# playsingle

import os
import time
import pickle
import inspect
from threading import Thread
filepath = os.path.realpath(
            os.path.abspath(
                os.path.split(
                    inspect.getfile(
                        inspect.currentframe()))[0]))
                        
class Game():
    '''Handle game simulation'''
    def __init__(self):
        '''class inits'''
        # timer init
        self.timer = Timer()
        self.timer.is_daemon = True
        self.timer.start()
        self.R6 = [0,1,2,3,4,5]
        
    def play(self, cards):
        '''returns average ev of {pcard, x, dcard}'''
        deck = Deck()
        (self.card1, self.dcard) = cards
        self.evds = [[]for _ in range(16)]
        self.hands = [[]for _ in range(16)]
        self.pcards = [deck.pick(self.card1)]
        self.dcards = [deck.pick(self.dcard)]
        self.ddib = self.eval_dealer(deck.cards)
        sco = score(self.pcards)
        return self.ev(self.pcards, deck.cards, self.evd(sco, self.ddib)) if sco else 1.5 * (1 - self.ddib[5])
    
    def evd(self, sco, ddib):
        '''returns ev of player's score against dealer's score distribution'''
        if sco > 21:
            return 0
        if sco == 0:
            return 1.5*(1 - ddib[5])
        toreturn = ddib[6] - ddib[5]
        index = max([sco - 17, -1])
        toreturn += sum(ddib[:index if index != -1 else 0]) - sum(ddib[index+1:5])
        return toreturn

    def ev(self, phand, deck, cur_ev):
        '''recursive function evaluating player's ev for each possible action'''
        ev_draw = 0
        tcount = float(sum(deck))
        # simulate each possible draw
        for value, count in enumerate(deck):
            if count:
                # evaluating new score
                nhand = phand + [value]
                sco = score(nhand)
                ndeck = [_ for _ in deck]
                ndeck[value] -= 1
                # handle 'too many' 
                if sco > 21:
                    ev_draw -= count
                else:
                    lhand = len(nhand)
                    shand = sorted(nhand[1:])
                    # considering ev({x0, x1, x2, ..., xi}) == ev({x0, permutations(x1:xi)})
                    # access ev if stored 
                    try:
                        ev_draw += count * self.evds[lhand - 1][self.hands[lhand - 1].index(shand)]
                    except:
                        # handle 'must draw in any case' (skips ev calculation)
                        if sco < 12 and sco:
                            tmp_ev = self.ev(nhand, ndeck, cur_ev)
                        else:
                            # calculationg dealer's score distribution on more-or-less significant hands
                            if lhand < 5:
                                self.ddib = self.eval_dealer(ndeck)
                            # calculating ev
                            tmp_ev = self.evd(sco, self.ddib)
                            # going recursive
                            if sco < 19 and sco:
                                tmp_ev = max([tmp_ev, self.ev(nhand, ndeck, tmp_ev)])
                        # weigting found ev
                        ev_draw += count * tmp_ev
                        # saving result
                        if lhand > 2:
                            self.hands[lhand - 1].append(shand)
                            self.evds[lhand - 1].append(tmp_ev)
        return max(cur_ev, ev_draw/(tcount))
            
    
    def eval_dealer(self, deck):
        '''function making dealer's score distribution based on deck composition'''
        ddib = []
        for index in self.R6:
            sco = 0.
            for deep, endnodes in enumerate(GRAPHS[self.dcards[0]][index]):
                tosum = 0
                for endnode in endnodes:
                    cards = endnode[:-1]
                    tomult = endnode[-1]
                    for card in set(cards):
                        for i in range(cards.count(card)):
                            tomult *= deck[card] - i 
                    tosum += tomult
                decksum = sum(deck)
                tmp = 1
                for i in range(deep + 1):
                    tmp *= decksum - i
                sco += tosum / float(tmp)
            ddib.append(sco)
        return ddib + [1 - sum(ddib)]
        

class Deck:
    def __init__(self):
        self.cards = [32, 32, 32, 32, 32, 32, 32, 32, 32, 128]
    
    def pick(self, value):
        self.cards[value] -= 1
        return value

class Timer(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.count = 0
        self.done = 0
        self.hastorun = True
    def run(self):
        cnames = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T']
        while self.hastorun:
            cls()
            try:
                print('Running for {}s ({}%)'.format(self.count, self.done))
                print('Evaluating {}x vs {} {}'.format(cnames[game.card1], cnames[game.dcard], '.' * (self.count % 4)))
            except:
                print('Starting ...')
            time.sleep(1)
            self.count += 1

def cls():
    print('\n')
    os.system('cls' if os.name=='nt' else 'clear')
          
def score(cards):
    nbAces = cards.count(0)
    toreturn = sum(cards) + len(cards)
    if cards == [0, 9] or cards == [9, 0]:
        return 0
    return toreturn + 10 if (nbAces and toreturn < 12) else toreturn
        
def run():
    globals()['game'] = Game()
    deck = Deck()
    record = 0.
    hands = []
    probs = []
    s = float(sum(deck.cards))
    for c1 in range(10):
        p1 = deck.cards[c1]
        for c2 in range(10):
            if c1 == c2:
                p2 = p1 - 1
            else:
                p2 = deck.cards[c2]
            probs.append(p1 * p2)
            hands.append([c1, c2])
    for index in range(len(hands)):
        record += game.play(hands[index]) * probs[index]
        game.timer.done += 1
    game.timer.hastorun = False
    cls()
    print("Every case evaluated in {}s\nGlobal EV = {}%".format(game.timer.count, round(100 * record / (s * (s - 1)), 6)))
    
# static
with open(os.path.join(filepath, 'GRAPHS'), 'rb') as fp:
    GRAPHS = pickle.load(fp)

run()
